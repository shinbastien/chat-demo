{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bastien\\\\Desktop\\\\social-moving-demo\\\\src\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Main.css\";\nimport useChat from \"../useChat\";\nimport io from \"socket.io-client\";\nimport MakePeerConnection, { StyledVideo, Video } from \"../VideoChat/video\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nfunction Main() {\n  _s();\n\n  let is_new = true;\n  const location = useLocation();\n  const {\n    roomId,\n    userName\n  } = location.state;\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const {\n    chat,\n    sendMessage,\n    removeMessage\n  } = useChat(roomId, userName);\n  const [peers, setPeers] = useState([]);\n  const socket = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef();\n  const ChatRef = useRef(); // Set connection\n\n  useEffect(() => {\n    socket.current = io(SOCKET_SERVER_URL, {\n      query: {\n        GroupID: roomId,\n        userName: userName\n      }\n    });\n    socket.current.emit(\"join group\", groupID); // Get participants in group\n\n    users = socket.current.on(\"all users\");\n\n    if (users[userName]) {\n      is_new = false;\n    }\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    });\n    peers = MakePeerConnection(groupID, stream, userName, socket, users, is_new); // Get Video from Server\n    // Get Chat from Server\n\n    socket.current.on(NEW_CHAT_MESSAGE_EVENT, _ref => {\n      let {\n        messageId,\n        body,\n        senderId,\n        senderName,\n        ownedByCurrentUser\n      } = _ref;\n      const incomingMessage = { ...{\n          messageId,\n          body,\n          senderName,\n          ownedByCurrentUser\n        },\n        ownedByCurrentUser: senderId === socketRef.current.id\n      };\n      setChat(chat => [...chat, incomingMessage]);\n      console.log(\"2\", chat);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Room name: \", roomId, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(StyledVideo, {\n          muted: true,\n          ref: userVideo,\n          autoPlay: true,\n          playsInline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), peers.map((peer, index => {\n          return /*#__PURE__*/_jsxDEV(Video, {\n            peer: peer\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this);\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"Y3hl2a3lRkjpz0sxygiR/mN6+30=\", false, function () {\n  return [useLocation, useChat];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Bastien/Desktop/social-moving-demo/src/Main/Main.js"],"names":["React","useState","useEffect","useRef","useCallback","useLocation","useChat","io","MakePeerConnection","StyledVideo","Video","SOCKET_SERVER_URL","Main","is_new","location","roomId","userName","state","users","setUsers","stream","setStream","chat","sendMessage","removeMessage","peers","setPeers","socket","userVideo","peersRef","ChatRef","current","query","GroupID","emit","groupID","on","navigator","mediaDevices","getUserMedia","video","audio","then","srcObject","NEW_CHAT_MESSAGE_EVENT","messageId","body","senderId","senderName","ownedByCurrentUser","incomingMessage","socketRef","id","setChat","console","log","map","peer","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useCallback} from \"react\";\r\nimport {useLocation } from \"react-router-dom\";\r\nimport \"./Main.css\";\r\nimport useChat from \"../useChat\";\r\nimport io from \"socket.io-client\"\r\nimport MakePeerConnection, {StyledVideo, Video} from \"../VideoChat/video\"\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nfunction Main() {\r\n    let is_new = true;\r\n    const location = useLocation();\r\n    const {roomId, userName}= location.state;\r\n    const [users, setUsers] = useState({});\r\n    const [stream, setStream] = useState();\r\n    const { chat, sendMessage, removeMessage } = useChat(roomId, userName);\r\n    const [peers, setPeers] = useState([]);\r\n    \r\n    const socket = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef();\r\n\r\n    const ChatRef = useRef();\r\n\r\n    // Set connection\r\n\r\n    useEffect(() => {\r\n      socket.current = io(SOCKET_SERVER_URL, {\r\n        query: { \r\n          GroupID: roomId,\r\n          userName: userName,\r\n        },\r\n      });\r\n  \r\n      socket.current.emit(\"join group\", groupID);\r\n      // Get participants in group\r\n      users = socket.current.on(\"all users\");\r\n  \r\n      if (users[userName]) {\r\n            is_new = false;\r\n      }\r\n  \r\n      navigator.mediaDevices.getUserMedia({video: true, audio: true}).then(stream => {\r\n        setStream(stream);\r\n        if (userVideo.current) {\r\n            userVideo.current.srcObject = stream;\r\n        }\r\n      });\r\n      peers = MakePeerConnection(groupID, stream,userName, socket, users, is_new)\r\n\r\n    \r\n    // Get Video from Server\r\n      \r\n  \r\n  \r\n    // Get Chat from Server\r\n      socket.current.on(NEW_CHAT_MESSAGE_EVENT, ({messageId, body, senderId, senderName, ownedByCurrentUser}) => {\r\n        const incomingMessage = {\r\n          ...{messageId, body, senderName, ownedByCurrentUser},\r\n          ownedByCurrentUser: senderId === socketRef.current.id,\r\n        };\r\n        setChat((chat) => [...chat, incomingMessage]);\r\n        console.log(\"2\", chat);\r\n      });\r\n    }, [])\r\n    \r\n\r\n\r\n    \r\n    return (\r\n        <div>\r\n            Room name: {roomId}\r\n            <div>\r\n              <Container>\r\n                <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n                {peers.map((peer, index => {\r\n                  return (\r\n                    <Video key={index} peer={peer} />\r\n                  )\r\n                }))}\r\n              </Container>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}