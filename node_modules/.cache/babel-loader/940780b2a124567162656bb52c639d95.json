{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nfunction useChat(roomId, userName) {\n  _s();\n\n  const [chat, setChat] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        room: roomId,\n        name: userName\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, _ref => {\n      let {\n        body,\n        senderId,\n        senderName,\n        ownedByCurrentUser\n      } = _ref;\n      const incomingMessage = { ...{\n          body,\n          senderId,\n          senderName,\n          ownedByCurrentUser\n        },\n        ownedByCurrentUser: senderId === socketRef.current.id\n      };\n      setChat(chats => [...chats, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [chat]);\n\n  function sendMessage(messageBody, userName) {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      senderName: userName,\n      ownedByCurrentUser: true\n    });\n  }\n\n  ;\n  return {\n    chat,\n    sendMessage\n  };\n}\n\n_s(useChat, \"JpQRaU4lj3UQCKThm7VtHlLvZuA=\");\n\n;\nexport default useChat;","map":{"version":3,"sources":["C:/Users/Bastien/Desktop/social-moving-demo/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","userName","chat","setChat","socketRef","current","query","room","name","on","body","senderId","senderName","ownedByCurrentUser","incomingMessage","id","chats","disconnect","sendMessage","messageBody","emit"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,SAASC,OAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AAAA;;AAClC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMS,SAAS,GAAGV,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,SAAS,CAACC,OAAV,GAAoBT,cAAc,CAACE,iBAAD,EAAoB;AACpDQ,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEP,MADD;AAELQ,QAAAA,IAAI,EAAEP;AAFD;AAD6C,KAApB,CAAlC;AAOAG,IAAAA,SAAS,CAACC,OAAV,CAAkBI,EAAlB,CAAqBZ,sBAArB,EAA6C,QAAsD;AAAA,UAArD;AAACa,QAAAA,IAAD;AAAOC,QAAAA,QAAP;AAAiBC,QAAAA,UAAjB;AAA6BC,QAAAA;AAA7B,OAAqD;AACjG,YAAMC,eAAe,GAAG,EACtB,GAAG;AAACJ,UAAAA,IAAD;AAAOC,UAAAA,QAAP;AAAiBC,UAAAA,UAAjB;AAA6BC,UAAAA;AAA7B,SADmB;AAEtBA,QAAAA,kBAAkB,EAAEF,QAAQ,KAAKP,SAAS,CAACC,OAAV,CAAkBU;AAF7B,OAAxB;AAIAZ,MAAAA,OAAO,CAAEa,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAWF,eAAX,CAAZ,CAAP;AACD,KAND;AAQA,WAAO,MAAM;AACXV,MAAAA,SAAS,CAACC,OAAV,CAAkBY,UAAlB;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACf,IAAD,CAnBM,CAAT;;AAqBA,WAASgB,WAAT,CAAsBC,WAAtB,EAAmClB,QAAnC,EAA6C;AAC3CG,IAAAA,SAAS,CAACC,OAAV,CAAkBe,IAAlB,CAAuBvB,sBAAvB,EAA+C;AAC7Ca,MAAAA,IAAI,EAAES,WADuC;AAE7CR,MAAAA,QAAQ,EAAEP,SAAS,CAACC,OAAV,CAAkBU,EAFiB;AAG7CH,MAAAA,UAAU,EAAEX,QAHiC;AAI7CY,MAAAA,kBAAkB,EAAE;AAJyB,KAA/C;AAMD;;AAAA;AAED,SAAO;AAACX,IAAAA,IAAD;AAAOgB,IAAAA;AAAP,GAAP;AACD;;GApCQnB,O;;AAoCR;AAED,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nfunction useChat (roomId, userName) {\r\n  const [chat, setChat] = useState([]);\r\n\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\r\n      query: { \r\n        room: roomId,\r\n        name: userName,\r\n      },\r\n    });\r\n\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, ({body, senderId, senderName, ownedByCurrentUser}) => {\r\n      const incomingMessage = {\r\n        ...{body, senderId, senderName, ownedByCurrentUser},\r\n        ownedByCurrentUser: senderId === socketRef.current.id,\r\n      };\r\n      setChat((chats) => [...chats, incomingMessage]);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [chat]);\r\n\r\n  function sendMessage (messageBody, userName) {\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n      body: messageBody,\r\n      senderId: socketRef.current.id,\r\n      senderName: userName,\r\n      ownedByCurrentUser: true,\r\n    });\r\n  };\r\n\r\n  return {chat, sendMessage };\r\n};\r\n\r\nexport default useChat;"]},"metadata":{},"sourceType":"module"}