{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId, userName) => {\n  _s();\n\n  const [chat, setChat] = useState([]);\n  console.log(chat);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        room: roomId,\n        name: userName\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, _ref => {\n      let {\n        body,\n        senderId,\n        senderName,\n        ownedByCurrentUser\n      } = _ref;\n      const incomingMessage = { ...{\n          body,\n          senderName,\n          ownedByCurrentUser\n        },\n        ownedByCurrentUser: senderId === socketRef.current.id\n      };\n      setChat([...chat, incomingMessage]);\n      console.log(chat);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody, userName) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      senderName: userName,\n      ownedByCurrentUser: true\n    });\n    console.log(\"send socket info\");\n  };\n\n  console.log(chat);\n  return {\n    chat,\n    sendMessage\n  };\n};\n\n_s(useChat, \"JpQRaU4lj3UQCKThm7VtHlLvZuA=\");\n\nexport default useChat;","map":{"version":3,"sources":["C:/Users/Bastien/Desktop/social-moving-demo/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","userName","chat","setChat","console","log","socketRef","current","query","room","name","on","body","senderId","senderName","ownedByCurrentUser","incomingMessage","id","disconnect","sendMessage","messageBody","emit"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAAA;;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAMI,SAAS,GAAGZ,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,SAAS,CAACC,OAAV,GAAoBX,cAAc,CAACE,iBAAD,EAAoB;AACpDU,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAET,MADD;AAELU,QAAAA,IAAI,EAAET;AAFD;AAD6C,KAApB,CAAlC;AAOAK,IAAAA,SAAS,CAACC,OAAV,CAAkBI,EAAlB,CAAqBd,sBAArB,EAA6C,QAAsD;AAAA,UAArD;AAACe,QAAAA,IAAD;AAAOC,QAAAA,QAAP;AAAiBC,QAAAA,UAAjB;AAA6BC,QAAAA;AAA7B,OAAqD;AACjG,YAAMC,eAAe,GAAG,EACtB,GAAG;AAACJ,UAAAA,IAAD;AAAOE,UAAAA,UAAP;AAAmBC,UAAAA;AAAnB,SADmB;AAEtBA,QAAAA,kBAAkB,EAAEF,QAAQ,KAAKP,SAAS,CAACC,OAAV,CAAkBU;AAF7B,OAAxB;AAIAd,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUc,eAAV,CAAD,CAAP;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,KAPD;AASA,WAAO,MAAM;AACXI,MAAAA,SAAS,CAACC,OAAV,CAAkBW,UAAlB;AACD,KAFD;AAGD,GApBQ,EAoBN,CAAClB,MAAD,CApBM,CAAT;;AAuBA,QAAMmB,WAAW,GAAG,CAACC,WAAD,EAAcnB,QAAd,KAA2B;AAC7CK,IAAAA,SAAS,CAACC,OAAV,CAAkBc,IAAlB,CAAuBxB,sBAAvB,EAA+C;AAC7Ce,MAAAA,IAAI,EAAEQ,WADuC;AAE7CP,MAAAA,QAAQ,EAAEP,SAAS,CAACC,OAAV,CAAkBU,EAFiB;AAG7CH,MAAAA,UAAU,EAAEb,QAHiC;AAI7Cc,MAAAA,kBAAkB,EAAE;AAJyB,KAA/C;AAMAX,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GARD;;AAUAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAO;AAACA,IAAAA,IAAD;AAAOiB,IAAAA;AAAP,GAAP;AACD,CAxCD;;GAAMpB,O;;AA0CN,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst useChat = (roomId, userName) => {\r\n  const [chat, setChat] = useState([]);\r\n  console.log(chat);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\r\n      query: { \r\n        room: roomId,\r\n        name: userName,\r\n      },\r\n    });\r\n\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, ({body, senderId, senderName, ownedByCurrentUser}) => {\r\n      const incomingMessage = {\r\n        ...{body, senderName, ownedByCurrentUser},\r\n        ownedByCurrentUser: senderId === socketRef.current.id,\r\n      };\r\n      setChat([...chat, incomingMessage]);\r\n      console.log(chat);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n\r\n  const sendMessage = (messageBody, userName) => {\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n      body: messageBody,\r\n      senderId: socketRef.current.id,\r\n      senderName: userName,\r\n      ownedByCurrentUser: true,\r\n    });\r\n    console.log(\"send socket info\");\r\n  };\r\n\r\n  console.log(chat);\r\n  return {chat, sendMessage};\r\n};\r\n\r\nexport default useChat;\r\n"]},"metadata":{},"sourceType":"module"}