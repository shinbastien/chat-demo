{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bastien\\\\Desktop\\\\social-moving-demo\\\\src\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Main.css\";\nimport useChat from \"../useChat\";\nimport io from \"socket.io-client\";\nimport MakePeerConnection, { StyledVideo, Video, Container } from \"../VideoChat/video\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\n\nfunction Main() {\n  _s();\n\n  let is_new = true;\n  const location = useLocation();\n  const {\n    groupID,\n    userName\n  } = location.state;\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const {\n    chat,\n    sendMessage,\n    removeMessage\n  } = useChat(groupID, userName);\n  const [peers, setPeers] = useState([]);\n  const socket = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef();\n  const ChatRef = useRef(); // Set connection\n\n  useEffect(() => {\n    socket.current = io(SOCKET_SERVER_URL, {\n      query: {\n        GroupID: groupID,\n        userName: userName\n      }\n    });\n    socket.current.emit(\"join group\", groupID); // Get participants in group\n\n    users = socket.current.on(\"all users\");\n\n    if (users[userName]) {\n      is_new = false;\n    }\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    });\n    setPeers(MakePeerConnection(groupID, stream, userName, socket, users, is_new)); // Get Video from Server\n    // Get Chat from Server\n    //   socket.current.on(NEW_CHAT_MESSAGE_EVENT, ({messageId, body, senderId, senderName, ownedByCurrentUser}) => {\n    //     const incomingMessage = {\n    //       ...{messageId, body, senderName, ownedByCurrentUser},\n    //       ownedByCurrentUser: senderId === socket.current.id,\n    //     };\n    //     setChat((chat) => [...chat, incomingMessage]);\n    //     console.log(\"2\", chat);\n    //   });\n    // }, [])\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Room name: \", groupID, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(StyledVideo, {\n            muted: true,\n            ref: userVideo,\n            autoPlay: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), peers.map((peer, index => {\n            return /*#__PURE__*/_jsxDEV(Video, {\n              peer: peer\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 21\n            }, this);\n          }))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this);\n  });\n}\n\n_s(Main, \"Y3hl2a3lRkjpz0sxygiR/mN6+30=\", false, function () {\n  return [useLocation, useChat];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Bastien/Desktop/social-moving-demo/src/Main/Main.js"],"names":["React","useState","useEffect","useRef","useCallback","useLocation","useChat","io","MakePeerConnection","StyledVideo","Video","Container","SOCKET_SERVER_URL","NEW_CHAT_MESSAGE_EVENT","Main","is_new","location","groupID","userName","state","users","setUsers","stream","setStream","chat","sendMessage","removeMessage","peers","setPeers","socket","userVideo","peersRef","ChatRef","current","query","GroupID","emit","on","navigator","mediaDevices","getUserMedia","video","audio","then","srcObject","map","peer","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, useCallback} from \"react\";\r\nimport {useLocation } from \"react-router-dom\";\r\nimport \"./Main.css\";\r\nimport useChat from \"../useChat\";\r\nimport io from \"socket.io-client\"\r\nimport MakePeerConnection, {StyledVideo, Video, Container} from \"../VideoChat/video\"\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\n\r\nfunction Main() {\r\n    let is_new = true;\r\n    const location = useLocation();\r\n    const {groupID, userName}= location.state;\r\n    const [users, setUsers] = useState({});\r\n    const [stream, setStream] = useState();\r\n    const { chat, sendMessage, removeMessage } = useChat(groupID, userName);\r\n    const [peers, setPeers] = useState([]);\r\n    \r\n    const socket = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef();\r\n\r\n    const ChatRef = useRef();\r\n\r\n    // Set connection\r\n\r\n    useEffect(() => {\r\n      socket.current = io(SOCKET_SERVER_URL, {\r\n        query: { \r\n          GroupID: groupID,\r\n          userName: userName,\r\n        },\r\n      });\r\n  \r\n      socket.current.emit(\"join group\", groupID);\r\n      // Get participants in group\r\n      users = socket.current.on(\"all users\");\r\n  \r\n      if (users[userName]) {\r\n            is_new = false;\r\n      }\r\n  \r\n      navigator.mediaDevices.getUserMedia({video: true, audio: true}).then(stream => {\r\n        setStream(stream);\r\n        if (userVideo.current) {\r\n            userVideo.current.srcObject = stream;\r\n        }\r\n      });\r\n      setPeers(MakePeerConnection(groupID, stream,userName, socket, users, is_new));\r\n\r\n    \r\n    // Get Video from Server\r\n      \r\n  \r\n  \r\n    // Get Chat from Server\r\n    //   socket.current.on(NEW_CHAT_MESSAGE_EVENT, ({messageId, body, senderId, senderName, ownedByCurrentUser}) => {\r\n    //     const incomingMessage = {\r\n    //       ...{messageId, body, senderName, ownedByCurrentUser},\r\n    //       ownedByCurrentUser: senderId === socket.current.id,\r\n    //     };\r\n    //     setChat((chat) => [...chat, incomingMessage]);\r\n    //     console.log(\"2\", chat);\r\n    //   });\r\n    // }, [])\r\n    \r\n\r\n\r\n    \r\n    return (\r\n        <div>\r\n            Room name: {groupID}\r\n            <div>\r\n              <Container>\r\n                <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n                {peers.map((peer, index => {\r\n                  return (\r\n                    <Video key={index} peer={peer} />\r\n                  )\r\n                }))}\r\n              </Container>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}