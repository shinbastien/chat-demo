{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nfunction useChat(roomId, userName) {\n  _s();\n\n  const [state, setState] = useState([{\n    message: \"\",\n    name: \"\"\n  }]);\n  const [chats, setChats] = useState([]);\n  console.log(chats);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, _ref => {\n      let {\n        message,\n        name\n      } = _ref;\n      const incomingMessage = { ...{\n          message,\n          name\n        },\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      setChats(chats => [...chats, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody, userName) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      senderName: userName\n    });\n  };\n\n  return {\n    chats,\n    sendMessage\n  };\n}\n\n_s(useChat, \"sMxKIF/soY/mjKq4Jc0tY8xliZQ=\");\n\n;\nexport default useChat;","map":{"version":3,"sources":["C:/Users/Bastien/Desktop/social-moving-demo/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","userName","state","setState","message","name","chats","setChats","console","log","socketRef","current","query","on","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body","senderName"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,SAASC,OAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AAAA;;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAqBR,QAAQ,CAAC,CAAC;AAACS,IAAAA,OAAO,EAAE,EAAV;AAAcC,IAAAA,IAAI,EAAE;AAApB,GAAD,CAAD,CAAnC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAMI,SAAS,GAAGhB,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,SAAS,CAACC,OAAV,GAAoBf,cAAc,CAACE,iBAAD,EAAoB;AACpDc,MAAAA,KAAK,EAAE;AAAEZ,QAAAA;AAAF;AAD6C,KAApB,CAAlC;AAIAU,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBhB,sBAArB,EAA6C,QAAqB;AAAA,UAApB;AAACO,QAAAA,OAAD;AAAUC,QAAAA;AAAV,OAAoB;AAChE,YAAMS,eAAe,GAAG,EACtB,GAAG;AAACV,UAAAA,OAAD;AAAUC,UAAAA;AAAV,SADmB;AAEtBU,QAAAA,kBAAkB,EAAEX,OAAO,CAACY,QAAR,KAAqBN,SAAS,CAACC,OAAV,CAAkBM;AAFrC,OAAxB;AAIAV,MAAAA,QAAQ,CAAED,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAWQ,eAAX,CAAZ,CAAR;AACD,KAND;AAQA,WAAO,MAAM;AACXJ,MAAAA,SAAS,CAACC,OAAV,CAAkBO,UAAlB;AACD,KAFD;AAGD,GAhBQ,EAgBN,CAAClB,MAAD,CAhBM,CAAT;;AAkBA,QAAMmB,WAAW,GAAG,CAACC,WAAD,EAAcnB,QAAd,KAA2B;AAC7CS,IAAAA,SAAS,CAACC,OAAV,CAAkBU,IAAlB,CAAuBxB,sBAAvB,EAA+C;AAC7CyB,MAAAA,IAAI,EAAEF,WADuC;AAE7CJ,MAAAA,QAAQ,EAAEN,SAAS,CAACC,OAAV,CAAkBM,EAFiB;AAG7CM,MAAAA,UAAU,EAAEtB;AAHiC,KAA/C;AAKD,GAND;;AAQA,SAAO;AAAEK,IAAAA,KAAF;AAASa,IAAAA;AAAT,GAAP;AACD;;GAjCQpB,O;;AAiCR;AAED,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nfunction useChat (roomId, userName) {\r\n  const [state, setState] =  useState([{message: \"\", name: \"\"}])\r\n  const [chats, setChats] = useState([]);\r\n  console.log(chats);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\r\n      query: { roomId },\r\n    });\r\n\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, ({message, name}) => {\r\n      const incomingMessage = {\r\n        ...{message, name},\r\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\r\n      };\r\n      setChats((chats) => [...chats, incomingMessage]);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n  const sendMessage = (messageBody, userName) => {\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n      body: messageBody,\r\n      senderId: socketRef.current.id,\r\n      senderName: userName,\r\n    });\r\n  };\r\n\r\n  return { chats, sendMessage };\r\n};\r\n\r\nexport default useChat;"]},"metadata":{},"sourceType":"module"}